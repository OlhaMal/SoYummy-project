{"version":3,"file":"static/js/651.e1dffba5.chunk.js","mappings":"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","sources":["components/AddRecipeForm/AddRecipeForm.jsx","pages/AddRecipesPage/AddRecipesPage.jsx"],"sourcesContent":["// import { RecipeDescriptionFields } from './RecipeDescriptionFields';\nimport recipes from 'data/recipes.json';\nimport schemaAddRecipe from 'components/utils/schemaAddRecipe';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport addPhoto from \"images/upload-recipe.png\"\n\nconst preparationTimes = Array.from(\n  { length: 25 },\n  (_, index) => (index + 1) * 5\n);\n\nexport const AddRecipeForm = ({ addRecipe, redirectToMyRecipes }) => {\n  const categoryList = new Set(recipes.map(recipe => recipe.category).sort());\n\n  const initialValues = {\n    photo: '',\n    name: '',\n    description: '',\n    category: '',\n    preparationTime: '',\n    ingredients: [],\n    preparationSteps: [],\n  };\n\n  const handleFormSubmit = (values, { setSubmitting }) => {\n    // Simulate API request to create a new recipe\n    setTimeout(() => {\n      addRecipe(values); // Assuming addRecipe is a function to handle the recipe creation\n      setSubmitting(false);\n      redirectToMyRecipes(); // Assuming redirectToMyRecipes is a function to redirect to MyRecipesPage\n    }, 1000);\n  };\n\n  const handleFileChange = (event, setFieldValue) => {\n    setFieldValue('photo', event.currentTarget.files[0]);\n  };\n\n  const handleAddIngredient = (values, setFieldValue) => {\n    const ingredients = [...values.ingredients, { name: '', measure: '' }];\n    setFieldValue('ingredients', ingredients);\n  };\n\n  const handleRemoveIngredient = (index, values, setFieldValue) => {\n    const ingredients = [...values.ingredients];\n    ingredients.splice(index, 1);\n    setFieldValue('ingredients', ingredients);\n  };\n\n//   const handleIngredientChange = (\n//     index,\n//     field,\n//     value,\n//     values,\n//     setFieldValue\n//   ) => {\n//     const ingredients = [...values.ingredients];\n//     ingredients[index][field] = value;\n//     setFieldValue('ingredients', ingredients);\n//   };\n\n  const handlePreparationChange = (event, values, setFieldValue) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      const preparationSteps = [...values.preparationSteps, event.target.value];\n      setFieldValue('preparationSteps', preparationSteps);\n      event.target.value = '';\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schemaAddRecipe}\n      onSubmit={handleFormSubmit}\n    >\n      {({ values, isSubmitting, setFieldValue }) => (\n        <Form>\n          <div>\n            <label htmlFor=\"photo\"><img src={addPhoto} alt=\"add recipe\" /></label>\n            <Field\n              type=\"file\"\n              id=\"photo\"\n              name=\"photo\"\n              accept=\"image/*\"\n              onChange={event => handleFileChange(event, setFieldValue)}\n              style={{display: \"none\"}}\n            />\n            <ErrorMessage\n              name=\"photo\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"name\"></label>\n            <Field type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter item title\"/>\n            <ErrorMessage\n              name=\"name\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"description\"></label>\n            <Field as=\"textarea\" id=\"description\" name=\"description\" placeholder=\"Enter about recipe\" />\n            <ErrorMessage\n              name=\"description\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"category\">Category</label>\n            <Field as=\"select\" id=\"category\" name=\"category\">\n              <option value=\"\">Select a category</option>\n              {[...categoryList].map(category => (\n                <option key={category} value={category}>\n                  {category}\n                </option>\n              ))}\n            </Field>\n            <ErrorMessage\n              name=\"category\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"preparationTime\">Cooking time</label>\n            <Field as=\"select\" id=\"preparationTime\" name=\"preparationTime\">\n              <option value=\"\">Select preparation time</option>\n              {preparationTimes.map(time => (\n                <option key={time} value={time}>\n                  {time} min\n                </option>\n              ))}\n            </Field>\n            <ErrorMessage\n              name=\"preparationTime\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </div>\n\n          <div>\n            <h3>Ingredients:</h3>\n            <button\n              type=\"button\"\n              onClick={() => handleAddIngredient(values, setFieldValue)}\n            >\n              Add Ingredient\n            </button>\n            {values.ingredients.map((ingredient, index) => (\n              <div key={index}>\n                <Field\n                  type=\"text\"\n                  name={`ingredients[${index}].name`}\n                  placeholder=\"Ingredient Name\"\n                />\n                <Field as=\"select\" name={`ingredients[${index}].measure`}>\n                  <option value=\"\">Select measure</option>\n                  <option value=\"grams\">tbs</option>\n                  <option value=\"milliliters\">tsp</option>\n                  <option value=\"pieces\">kg</option>\n                  <option value=\"pieces\"></option>\n                </Field>\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    handleRemoveIngredient(index, values, setFieldValue)\n                  }\n                >\n                  Remove Ingredient\n                </button>\n              </div>\n            ))}\n          </div>\n\n          <div>\n            <h3>Preparation Steps:</h3>\n            <Field\n              as=\"textarea\"\n              name=\"preparationSteps\"\n              onKeyDown={event =>\n                handlePreparationChange(event, values, setFieldValue)\n              }\n            />\n            {values.preparationSteps.map((step, index) => (\n              <div key={index}>{step}</div>\n            ))}\n          </div>\n\n          <button type=\"submit\" disabled={isSubmitting}>\n            Add\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { AddRecipeForm } from 'components/AddRecipeForm/AddRecipeForm';\n\nconst AddRecipesPage = ({ onClose }) => {\n\n  return (\n    <>\n      <AddRecipeForm />\n    </>);\n};\n\nexport default AddRecipesPage;\n"],"names":["preparationTimes","Array","from","length","_","index","AddRecipeForm","addRecipe","redirectToMyRecipes","categoryList","Set","recipes","map","recipe","category","sort","initialValues","photo","name","description","preparationTime","ingredients","preparationSteps","validationSchema","schemaAddRecipe","onSubmit","values","setSubmitting","setTimeout","isSubmitting","setFieldValue","htmlFor","src","alt","type","id","accept","onChange","event","currentTarget","files","handleFileChange","style","display","component","className","placeholder","as","value","time","onClick","measure","handleAddIngredient","ingredient","splice","handleRemoveIngredient","onKeyDown","key","preventDefault","target","handlePreparationChange","step","disabled","onClose"],"sourceRoot":""}